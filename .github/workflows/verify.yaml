name: Run Tests

on:
  workflow_call:
    inputs:
      version:
        required: false
        type: string
        description: optional version of upstream EDC components to use
  workflow_dispatch:
    inputs:
      version:
        required: false
        type: string
        description: optional version of upstream EDC components to use
  push:
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'CODEOWNERS'
      - 'LICENSE'

env:
  VERSION: ${{ github.event.inputs.version || inputs.version }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  Checkstyle:
    permissions:
      id-token: write
      checks: write
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: eclipse-edc/.github/.github/actions/setup-build@main

      - name: "Set upstream EDC version"
        run: |
          # update EDC dependencies in the version catalog
          if [ ! -z ${{ env.VERSION }} ]; then
          echo "set EDC version to ${{ env.VERSION }}"
          existingVersion=$(grep "version" gradle.properties  | awk -F= '{print $2}') 
          sed -i "s/$existingVersion/${{ env.VERSION }}/g" gradle/libs.versions.toml

          # some debug print
          head -20 gradle/libs.versions.toml
          fi

      - name: Run Checkstyle
        run: ./gradlew --refresh-dependencies checkstyleMain checkstyleTest checkstyleTestFixtures

  Unit-Tests:
    runs-on: ubuntu-latest
    env:
      JACOCO: true
    steps:
      - uses: actions/checkout@v4
      - uses: eclipse-edc/.github/.github/actions/setup-build@main
      - name: "Set upstream EDC version"
        run: |
          # update EDC dependencies in the version catalog
          if [ ! -z ${{ env.VERSION }} ]; then
            echo "set EDC version to ${{ env.VERSION }}"
            existingVersion=$(grep "version" gradle.properties  | awk -F= '{print $2}') 
            sed -i "s/$existingVersion/${{ env.VERSION }}/g" gradle/libs.versions.toml

            # some debug print
            head -20 gradle/libs.versions.toml
          fi

      - name: Run unit tests
        uses: eclipse-edc/.github/.github/actions/run-tests@main
        with:
          command: ./gradlew --refresh-dependencies test jacocoTestReport

  Azure-Storage-Integration-Tests:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: eclipse-edc/.github/.github/actions/setup-build@main

      - name: "Set upstream EDC version"
        run: |
          # update EDC dependencies in the version catalog
          if [ ! -z ${{ env.VERSION }} ]; then
            echo "set EDC version to ${{ env.VERSION }}"
            existingVersion=$(grep "version" gradle.properties  | awk -F= '{print $2}') 
            sed -i "s/$existingVersion/${{ env.VERSION }}/g" gradle/libs.versions.toml

            # some debug print
            head -20 gradle/libs.versions.toml
          fi

      - name: Azure Storage Tests
        uses: eclipse-edc/.github/.github/actions/run-tests@main
        with:
          command: |
            ./gradlew --refresh-dependencies test -DincludeTags="AzureStorageIntegrationTest"

  #  TODO: this test has been commented out because it was flaky. Further investigation needed. ref: https://github.com/eclipse-edc/Connector/issues/2403
  #  Azure-Cloud-Integration-Test:
  #    needs: [ Check-Cloud-Environments ]
  #    if: needs.Check-Cloud-Environments.outputs.has-azure == 'true'
  #    environment: Azure-dev
  #    runs-on: ubuntu-latest
  #
  #    # Grant permissions to obtain federated identity credentials
  #    # see https://docs.github.com/actions/deployment/security-hardening-your-deployments/configuring-openid-connect-in-azure
  #    permissions:
  #      id-token: write
  #      contents: read
  #
  #    steps:
  #      - uses: actions/checkout@v4
  #      - uses: eclipse-edc/.github/.github/actions/setup-build@main
  #
  #      - name: 'Az CLI login'
  #        uses: azure/login@v1
  #        with:
  #          client-id: ${{ secrets.AZURE_CLIENT_ID }}
  #          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
  #          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  #
  #      - name: "Fetch Terraform outputs"
  #        run: printf "$RUNTIME_SETTINGS" > resources/azure/testing/runtime_settings.properties
  #        env:
  #          RUNTIME_SETTINGS: ${{ secrets.RUNTIME_SETTINGS }}
  #
  #      - name: Data Plane Azure Data Factory Test
  #        uses: eclipse-edc/.github/.github/actions/run-tests@main
  #        env:
  #          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  #          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  #          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  #        with:
  #          command: |
  #            ./gradlew -p extensions/data-plane/data-plane-azure-data-factory test -DincludeTags="AzureDataFactoryIntegrationTest"
  #            ./gradlew -p system-tests/azure-data-factory-tests test -DincludeTags="AzureDataFactoryIntegrationTest"

  Component-Tests:
    env:
      JACOCO: true
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: eclipse-edc/.github/.github/actions/setup-build@main

      - name: "Set upstream EDC version"
        run: |
          # update EDC dependencies in the version catalog
          if [ ! -z ${{ env.VERSION }} ]; then
            echo "set EDC version to ${{ env.VERSION }}"
            existingVersion=$(grep "version" gradle.properties  | awk -F= '{print $2}') 
            sed -i "s/$existingVersion/${{ env.VERSION }}/g" gradle/libs.versions.toml

            # some debug print
            head -20 gradle/libs.versions.toml
          fi

      - name: Component Tests
        uses: eclipse-edc/.github/.github/actions/run-tests@main
        with:
          command: ./gradlew --refresh-dependencies jacocoTestReport -DincludeTags="ComponentTest"

  End-To-End-Tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: eclipse-edc/.github/.github/actions/setup-build@main
      - name: "Set upstream EDC version"
        run: |
          # update EDC dependencies in the version catalog
          if [ ! -z ${{ env.VERSION }} ]; then
            echo "set EDC version to ${{ env.VERSION }}"
            existingVersion=$(grep "version" gradle.properties  | awk -F= '{print $2}') 
            sed -i "s/$existingVersion/${{ env.VERSION }}/g" gradle/libs.versions.toml

            # some debug print
            head -20 gradle/libs.versions.toml
          fi
      - name: End to End Integration Tests
        uses: eclipse-edc/.github/.github/actions/run-tests@main
        with:
          command: ./gradlew --refresh-dependencies test -DincludeTags="EndToEndTest"

  API-Tests:
    env:
      JACOCO: true
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: eclipse-edc/.github/.github/actions/setup-build@main
      - name: "Set upstream EDC version"
        run: |
          # update EDC dependencies in the version catalog
          if [ ! -z ${{ env.VERSION }} ]; then
            echo "set EDC version to ${{ env.VERSION }}"
            existingVersion=$(grep "version" gradle.properties  | awk -F= '{print $2}') 
            sed -i "s/$existingVersion/${{ env.VERSION }}/g" gradle/libs.versions.toml

            # some debug print
            head -20 gradle/libs.versions.toml
          fi

      - name: Component Tests
        uses: eclipse-edc/.github/.github/actions/run-tests@main
        with:
          command: ./gradlew --refresh-dependencies test jacocoTestReport -DincludeTags="ApiTest"

  Upload-Test-Report:
    needs:
      - Unit-Tests
      - Azure-Storage-Integration-Tests
      - End-To-End-Tests
      - Component-Tests

    permissions:
      checks: write
      pull-requests: write

    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts
      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          junit_files: "**/test-results/**/*.xml"

  Upload-Coverage-Report-To-Codecov:
    needs:
      - Unit-Tests
      - Component-Tests
      - API-Tests
    runs-on: ubuntu-latest
    if: always()
    steps:
      # Sources are needed for Codecov report
      - uses: actions/checkout@v4
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts
      - name: CodeCov
        uses: codecov/codecov-action@v3
