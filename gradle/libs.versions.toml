[metadata]
format.version = "1.1"

[versions]
awaitility = "4.2.0"
azure-rm = "2.32.0"
bouncyCastle-jdk18on = "1.76"
edc = "0.4.2-SNAPSHOT"
# we need to pin the version of IH, because this is the last version to contain the DWN implementation
# current snapshot builds of IH don't have feature parity yet.
# todo: remove this once IH supports credential presentation and issuance
identityhub = "0.3.1"
failsafe = "3.3.2"
httpMockServer = "5.15.0"
jakarta-json = "2.0.1"
junit = "5.10.1"
mockito = "5.2.0"
nimbus = "9.32"
openTelemetry = "1.18.0"
opentelemetry-proto = "1.0.0-alpha"
postgres = "42.6.0"
restAssured = "5.3.2"
rsApi = "3.1.0"
testcontainers = "1.19.3"



[libraries]
awaitility = { module = "org.awaitility:awaitility", version.ref = "awaitility" }
assertj = { module = "org.assertj:assertj-core", version = "3.24.2" }
bouncyCastle-bcpkixJdk18on = { module = "org.bouncycastle:bcpkix-jdk18on", version.ref = "bouncyCastle-jdk18on" }
bouncyCastle-bcprovJdk18on = { module = "org.bouncycastle:bcprov-jdk18on", version.ref = "bouncyCastle-jdk18on" }
edc-api-management = { module = "org.eclipse.edc:management-api", version.ref = "edc" }
edc-api-management-config = { module = "org.eclipse.edc:management-api-configuration", version.ref = "edc" }
edc-api-observability = { module = "org.eclipse.edc:api-observability", version.ref = "edc" }
edc-boot = { module = "org.eclipse.edc:boot", version.ref = "edc" }
edc-config-filesystem = { module = "org.eclipse.edc:configuration-filesystem", version.ref = "edc" }
edc-vault-filesystem = { module = "org.eclipse.edc:vault-filesystem", version.ref = "edc" }
edc-core-connector = { module = "org.eclipse.edc:connector-core", version.ref = "edc" }
edc-core-controlplane = { module = "org.eclipse.edc:control-plane-core", version.ref = "edc" }
edc-core-controlplane-apiclient = { module = "org.eclipse.edc:control-plane-api-client", version.ref = "edc" }
edc-core-controlplane-api = { module = "org.eclipse.edc:control-plane-api", version.ref = "edc" }
edc-core-dataplane = { module = "org.eclipse.edc:data-plane-core", version.ref = "edc" }
edc-core-dataPlane-selector = { module = "org.eclipse.edc:data-plane-selector-core", version.ref = "edc" }
edc-core-dataPlane-util = { module = "org.eclipse.edc:data-plane-util", version.ref = "edc" }
edc-core-catalog = { module = "org.eclipse.edc:catalog-core", version.ref = "edc" }
edc-core-jersey = { module = "org.eclipse.edc:jersey-core", version.ref = "edc" }
edc-core-jetty = { module = "org.eclipse.edc:jetty-core", version.ref = "edc" }
edc-core-jwt = { module = "org.eclipse.edc:jwt-core", version.ref = "edc" }
edc-dpf-framework = { module = "org.eclipse.edc:data-plane-framework", version.ref = "edc" }
edc-dpf-selector-client = { module = "org.eclipse.edc:data-plane-selector-client", version.ref = "edc" }
edc-dpf-selector-core = { module = "org.eclipse.edc:data-plane-selector-core", version.ref = "edc" }
edc-dpf-selector-spi = { module = "org.eclipse.edc:data-plane-selector-spi", version.ref = "edc" }
edc-dpf-selector-api = { module = "org.eclipse.edc:data-plane-selector-api", version.ref = "edc" }
edc-dpf-client = { module = "org.eclipse.edc:data-plane-client", version.ref = "edc" }
edc-dpf-http = { module = "org.eclipse.edc:data-plane-http", version.ref = "edc" }
edc-dpf-http-oauth2 = { module = "org.eclipse.edc:data-plane-http-oauth2", version.ref = "edc" }
edc-dpf-api = { module = "org.eclipse.edc:data-plane-api", version.ref = "edc" }
edc-ext-azure-cosmos-core = { module = "org.eclipse.edc:azure-cosmos-core", version.ref = "edc" }
edc-ext-azure-test = { module = "org.eclipse.edc:azure-test", version.ref = "edc" }
edc-ext-http = { module = "org.eclipse.edc:http", version.ref = "edc" }
edc-ext-boot = { module = "org.eclipse.edc:boot", version.ref = "edc" }
edc-spi-fcc = { module = "org.eclipse.edc:federated-catalog-spi", version.ref = "edc" }
edc-controlplane-spi = { module = "org.eclipse.edc:control-plane-spi", version.ref = "edc" }
edc-iam-mock = { module = "org.eclipse.edc:iam-mock", version.ref = "edc" }
edc-ih-spi-store = { module = "org.eclipse.edc:identity-hub-store-spi", version.ref = "identityhub" }
edc-dsp = { module = "org.eclipse.edc:dsp", version.ref = "edc" }
edc-junit = { module = "org.eclipse.edc:junit", version.ref = "edc" }
edc-provision-http = { module = "org.eclipse.edc:provision-http", version.ref = "edc" }
edc-rs-spi-store = { module = "org.eclipse.edc:registration-service-store-spi", version.ref = "edc" }
edc-spi-catalog = { module = "org.eclipse.edc:catalog-spi", version.ref = "edc" }
edc-spi-contract = { module = "org.eclipse.edc:contract-spi", version.ref = "edc" }
edc-spi-policy = { module = "org.eclipse.edc:policy-spi", version.ref = "edc" }
edc-spi-core = { module = "org.eclipse.edc:core-spi", version.ref = "edc" }
edc-spi-transfer = { module = "org.eclipse.edc:transfer-spi", version.ref = "edc" }
edc-spi-web = { module = "org.eclipse.edc:web-spi", version.ref = "edc" }
edc-spi-jsonld = { module = "org.eclipse.edc:json-ld-spi", version.ref = "edc" }
edc-spi-dataplane = { module = "org.eclipse.edc:data-plane-spi", version.ref = "edc" }
edc-transfer-dataplane = { module = "org.eclipse.edc:transfer-data-plane", version.ref = "edc" }
edc-transfer-httppull-receiver = { module = "org.eclipse.edc:transfer-pull-http-receiver", version.ref = "edc" }
edc-transfer-httppull-receiver-dynamic = { module = "org.eclipse.edc:transfer-pull-http-dynamic-receiver", version.ref = "edc" }
edc-util = { module = "org.eclipse.edc:util", version.ref = "edc" }
edc-management-api-test-fixtures = { module = "org.eclipse.edc:management-api-test-fixtures", version.ref = "edc" }

# EDC dependencies for testing
edc-sql-core = { module = "org.eclipse.edc:sql-core", version.ref = "edc" }
edc-sql-assetindex = { module = "org.eclipse.edc:asset-index-sql", version.ref = "edc" }
edc-sql-contractdefinition = { module = "org.eclipse.edc:contract-definition-store-sql", version.ref = "edc" }
edc-sql-contractnegotiation = { module = "org.eclipse.edc:contract-negotiation-store-sql", version.ref = "edc" }
edc-sql-policydefinition = { module = "org.eclipse.edc:policy-definition-store-sql", version.ref = "edc" }
edc-sql-transferprocess = { module = "org.eclipse.edc:transfer-process-store-sql", version.ref = "edc" }
edc-sql-lease = { module = "org.eclipse.edc:sql-lease", version.ref = "edc" }
edc-sql-dataplane-instancestore = { module = "org.eclipse.edc:data-plane-instance-store-sql", version.ref = "edc" }
edc-sql-dataplane-store = { module = "org.eclipse.edc:data-plane-store-sql", version.ref = "edc" }
edc-sql-identityhub-store = { module = "org.eclipse.edc:identity-hub-store-sql", version.ref = "identityhub" }
edc-sql-participant-store = { module = "org.eclipse.edc:participant-store-sql", version.ref = "identityhub" }

# third-partyi deps
failsafe-core = { module = "dev.failsafe:failsafe", version.ref = "failsafe" }
opentelemetry-annotations = { module = "io.opentelemetry:opentelemetry-extension-annotations", version.ref = "openTelemetry" }
opentelemetry-api = { module = "io.opentelemetry:opentelemetry-api", version.ref = "openTelemetry" }
opentelemetry-proto = { module = "io.opentelemetry.proto:opentelemetry-proto", version.ref = "opentelemetry-proto" }
restAssured = { module = "io.rest-assured:rest-assured", version.ref = "restAssured" }
jakartaJson = { module = "org.glassfish:jakarta.json", version.ref = "jakarta-json" }
jakarta-rsApi = { module = "jakarta.ws.rs:jakarta.ws.rs-api", version.ref = "rsApi" }
junit-jupiter-api = { module = "org.junit.jupiter:junit-jupiter-api", version.ref = "junit" }
junit-jupiter-engine = { module = "org.junit.jupiter:junit-jupiter-engine", version.ref = "junit" }
edc-jsonld = { module = "org.eclipse.edc:json-ld", version.ref = "edc" }
mockserver-client = { module = "org.mock-server:mockserver-client-java", version.ref = "httpMockServer" }
mockserver-netty = { module = "org.mock-server:mockserver-netty", version.ref = "httpMockServer" }
nimbus-jwt = { module = "com.nimbusds:nimbus-jose-jwt", version.ref = "nimbus" }
mockito-core = { module = "org.mockito:mockito-core", version.ref = "mockito" }
mockito-inline = { module = "org.mockito:mockito-inline", version.ref = "mockito" }
postgres = { module = "org.postgresql:postgresql", version.ref = "postgres" }
testcontainers-junit = { module = "org.testcontainers:junit-jupiter", version.ref = "testcontainers" }


# Azure dependencies
azure-eventgrid = { group = "com.azure", name = "azure-messaging-eventgrid", version = "4.19.0" }
azure-identity = { group = "com.azure", name = "azure-identity", version = "1.10.1" }
azure-keyvault = { group = "com.azure", name = "azure-security-keyvault-secrets", version = "4.7.0" }
azure-mgmt-resources = { module = "com.microsoft.azure:azure-mgmt-resources", version = "1.41.4" }
azure-resourcemanager = { group = "com.azure.resourcemanager", name = "azure-resourcemanager", version.ref = "azure-rm" }
azure-resourcemanager-authorization = { group = "com.azure.resourcemanager", name = "azure-resourcemanager-authorization", version.ref = "azure-rm" }
azure-resourcemanager-datafactory = { group = "com.azure.resourcemanager", name = "azure-resourcemanager-datafactory", version = "1.0.0-beta.23" }
azure-resourcemanager-keyvault = { group = "com.azure.resourcemanager", name = "azure-resourcemanager-keyvault", version.ref = "azure-rm" }
azure-resourcemanager-storage = { group = "com.azure.resourcemanager", name = "azure-resourcemanager-storage", version.ref = "azure-rm" }
azure-storageblob = { group = "com.azure", name = "azure-storage-blob", version = "12.24.1" }

[bundles]

[plugins]
shadow = { id = "com.github.johnrengelman.shadow", version = "8.1.1" }
